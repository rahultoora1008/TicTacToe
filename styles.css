*,
*::after,
*::before {
	box-sizing: border-box;
}

/* Selecting root element and Creating variables for later use*/
:root {
	--cell-size: 100px;

	/* cell items size 90% of cell size*/
	--mark-size: calc(var(--cell-size) * .9);
}

body {
	margin: 0;
	overflow: hidden;
}

.board {
	width: 100vw;
	height: 100vh;
	display: grid;
	/* aligning grid in center */
	justify-content: center;
	align-content: center;
	justify-items: center;
	align-items: center;

	grid-template-columns: repeat(3, auto);
}

.cell {
	width: var(--cell-size); /* variable used */
	height: var(--cell-size); /* variable used */
	border: 1px solid black;
	position: relative;
	display: flex;
	/* aligning cell items in center */

	justify-content: center;
	align-items: center;

	/* cursor type */
	cursor: pointer;
}

/* Removing top borders form first, 2nd and 3rd cell*/
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
	border-top: none;
}

/* Removing left borders form first, 4th and 7th cell*/
.cell:nth-child(3n + 1) {
	border-left: none;
}

/* Removing left borders form 3rd, 6th and 9Sth cell*/
.cell:nth-child(3n + 3) {
	border-right: none;
}

.cell:last-child,
.cell:nth-child(8),
.cell:nth-child(7) {
	border-bottom: none;
}

/* disabling access if cell already has a class x or o  */
.cell.x,
.cell.o {
	cursor: not-allowed;
}

.cell.x::before,
.cell.x::after,
.cell.o::before {
	background-color: black;
}

/* applying hover effects */
.board.x .cell:not(.x):not(.o):hover::before,
.board.x .cell:not(.x):not(.o):hover::after,
.board.o .cell:not(.x):not(.o):hover::before {
	background-color: lightgrey;
}

/*Creating X using sudo elements*/
.cell.x::before,
.cell.x::after,
/* what to do when hovered */
	/* use not() selector to disable hover when it already has class o or x  */
	.board.x
	.cell:not(.x):not(.o):hover::before,
.board.x .cell:not(.x):not(.o):hover::after {
	content: '';
	position: absolute;
	width: calc(var(--mark-size) * .15);
	height: var(--mark-size);
}

.cell.x::before,
.board.x .cell:not(.x):not(.o):hover::before {
	transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.o):hover::after {
	transform: rotate(-45deg);
}

/*Creating O using sudo elements*/
.cell.o::before,
.cell.o::after,
.board.o .cell:not(.x):not(.o):hover::before,
.board.o .cell:not(.x):not(.o):hover::after {
	content: '';
	position: absolute;
	border-radius: 50%;
}

.cell.o::before,
.board.o .cell:not(.x):not(.o):hover::before {
	width: var(--mark-size);
	height: var(--mark-size);
}

.cell.o::after,
.board.o .cell:not(.x):not(.o):hover::after {
	width: calc(var(--mark-size) * .7);
	height: calc(var(--mark-size) * .7);
	background-color: white;
}

/* winning message button styles */
.winning-message {
	display: none;
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: rgba(0, 0, 0, .9);
	justify-content: center;
	align-items: center;
	color: white;
	font-size: 5rem;
	flex-direction: column;
}

.winning-message button {
	font-size: 3rem;
	background-color: white;
	border: 1px solid black;
	padding: .25em .5em;
	cursor: pointer;
}

.winning-message button:hover {
	background-color: black;
	color: white;
	border-color: white;
}

/* show this class when game is finished */
.winning-message.show {
	display: flex;
}
